import torch
import config
from tqdm import tqdm


def train_fn(
    disc, gen, loader, opt_disc, opt_gen, l1_loss, bce, g_scaler, d_scaler,
):
    loop = tqdm(loader, leave=True)

    for idx, (x, y) in enumerate(loop):
        x = x.to(config.DEVICE)
        y = y.to(config.DEVICE)
        
        # Train Discriminator
        with torch.cuda.amp.autocast():
            y_fake = gen(x)  #First a fake image is generated by the generator
            D_real = disc(x, y) #Discriminator prediction on real target
            D_real_loss = bce(D_real, torch.ones_like(D_real)) #Discriminator loss on real target,its goal is to minimize it
            D_fake = disc(x, y_fake.detach()) #Discriminator prediction on fake target
            D_fake_loss = bce(D_fake, torch.zeros_like(D_fake)) #Discriminator loss on fake target,its goal is to maximize it
            D_loss = (D_real_loss + D_fake_loss) / 2 # Total discriminator loss, taking average of real and fake losses #Discriminator wants to maximize it i.e its ability to classify between real and fake

        disc.zero_grad()
        d_scaler.scale(D_loss).backward()
        d_scaler.step(opt_disc)
        d_scaler.update()

        # Train generator
        with torch.cuda.amp.autocast():
            D_fake = disc(x, y_fake) #Discriminator prediction on fake target images
            G_fake_loss = bce(D_fake, torch.ones_like(D_fake)) #Generator loss based on how well it fools the discriminator
            L1 = l1_loss(y_fake, y) * config.L1_LAMBDA #L1 loss for image similarity regularization
            G_loss = G_fake_loss + L1 #Total generator loss, combining fake image loss and L1 regularization #Generator want to minimize it i.e its ability to fake as close as possible to real

        opt_gen.zero_grad()
        g_scaler.scale(G_loss).backward()
        g_scaler.step(opt_gen)
        g_scaler.update()

        if idx % 10 == 0:
            loop.set_postfix(
                D_real=torch.sigmoid(D_real).mean().item(),
                D_fake=torch.sigmoid(D_fake).mean().item(),
            )